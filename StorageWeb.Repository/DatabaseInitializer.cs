using Dapper;
using Npgsql;

namespace StorageWeb.Repository
{
    public static class DatabaseInitializer
    {
        public static async Task EnsureDatabaseExistsAsync(string connectionString, string databaseName)
        {
            var builder = new NpgsqlConnectionStringBuilder(connectionString)
            {
                Database = "postgres"
            };

            await using var connection = new NpgsqlConnection(builder.ConnectionString);
            await connection.OpenAsync();

            var sql = "SELECT 1 FROM pg_database WHERE datname = @Name";
            var exists = await connection.ExecuteScalarAsync<int?>(sql, new { Name = databaseName });

            if (exists == null)
            {
                await connection.ExecuteAsync($"CREATE DATABASE \"{databaseName}\"");
                Console.WriteLine($"База данных '{databaseName}' создана.");
            }
        }

        public static async Task EnsureTablesExistAsync(string connectionString)
        {
            await using var connection = new NpgsqlConnection(connectionString);
            await connection.OpenAsync();

            var existsReceipt = await connection.ExecuteScalarAsync<int>(
                "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'receipt'"
            );
            if (existsReceipt == 0)
            {
                var sql = @"
                    CREATE TABLE receipt (
                        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        number INT NOT NULL,
                        date DATE NOT NULL
                    );";
                await connection.ExecuteAsync(sql);
                Console.WriteLine("Таблица receipt создана.");
            }

            var existsResource = await connection.ExecuteScalarAsync<int>(
                "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'resource'"
            );
            if (existsResource == 0)
            {
                var sql = @"
                    CREATE TABLE resource (
                        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        name VARCHAR(30) NOT NULL,
                        status INT NOT NULL DEFAULT 1
                    );";
                await connection.ExecuteAsync(sql);
                Console.WriteLine("Таблица resource создана.");
            }

            var existsUnit = await connection.ExecuteScalarAsync<int>(
                "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'unit'"
            );
            if (existsUnit == 0)
            {
                var sql = @"
                    CREATE TABLE unit (
                        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        name VARCHAR(30) NOT NULL,
                        status INT NOT NULL DEFAULT 1
                    );";
                await connection.ExecuteAsync(sql);
                Console.WriteLine("Таблица unit создана.");
            }

            var existsReceiptResource = await connection.ExecuteScalarAsync<int>(
                "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'receipt_resource'"
            );
            if (existsReceiptResource == 0)
            {
                var sql = @"
                    CREATE TABLE receipt_resource (
                        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        receipt_id INT NOT NULL REFERENCES receipt(id) ON DELETE CASCADE,
                        resource_id INT NOT NULL REFERENCES resource(id),
                        unit_id INT NOT NULL REFERENCES unit(id),
                        count INT NOT NULL
                    );";
                await connection.ExecuteAsync(sql);
                Console.WriteLine("Таблица receipt_resource создана.");
            }
        }
    }
}
